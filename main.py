from flask import Flask, render_template_string, request, jsonify, redirect, url_for, flash
from gradio_client import Client, file, handle_file
import warnings
import os
import sys
import pytest
import tempfile
from unittest.mock import Mock, patch, mock_open
from werkzeug.utils import secure_filename
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
warnings.filterwarnings("ignore", category=FutureWarning)

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)
app.secret_key = os.environ.get('SECRET_KEY', 'dev-secret-key-change-in-production')
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max file size

# –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif'}


def get_client():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    haggi_token = os.environ.get("TOKEN_HUGGI")
    if not haggi_token:
        raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN_HUGGI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    return Client("amd/llama4-maverick-17b-128e-mi-amd")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏)
client = None


def get_or_create_client():
    global client
    if client is None:
        client = get_client()
    return client


def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


def analyze_image(image_path, prompt):
    try:
        client = get_or_create_client()
        result = client.predict(
            message={"text": prompt, "files": [handle_file(image_path)]},
            param_2="",
            param_3=2048,
            param_4=0.3,
            param_5=0,
            param_6=0,
            api_name="/chat"
        )

        token_value = result
        return {"success": True, "result": token_value}
    except Exception as e:
        return {"success": False, "error": str(e)}


# HTML —à–∞–±–ª–æ–Ω –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - Paligemma</title>
    <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; background-color: #f5f5f5; }
        .container { background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #333; text-align: center; margin-bottom: 30px; }
        .form-group { margin-bottom: 20px; }
        label { display: block; margin-bottom: 5px; font-weight: bold; }
        input[type="file"], input[type="text"] { width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 5px; }
        input[type="text"] { margin-bottom: 10px; }
        button { background-color: #4CAF50; color: white; padding: 12px 30px; border: none; border-radius: 5px; cursor: pointer; font-size: 16px; }
        button:hover { background-color: #45a049; }
        .result { margin-top: 20px; padding: 15px; border-radius: 5px; }
        .success { background-color: #d4edda; border: 1px solid #c3e6cb; color: #155724; }
        .error { background-color: #f8d7da; border: 1px solid #f5c6cb; color: #721c24; }
        .loading { background-color: #cce5ff; border: 1px solid #99ccff; color: #004085; }
        .upload-area { border: 2px dashed #ccc; padding: 20px; text-align: center; border-radius: 5px; }
        .upload-area:hover { border-color: #999; }
        .test-btn { background-color: #007bff; margin-top: 10px; }
        .test-btn:hover { background-color: #0056b3; }
    </style>
</head>
<body>
    <div class="container">
        <h1>ü§ñ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - Paligemma</h1>
        
        <form method="post" enctype="multipart/form-data">
            <div class="form-group">
                <label for="image">–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</label>
                <div class="upload-area">
                    <input type="file" id="image" name="image" accept=".jpg,.jpeg,.png,.gif" required>
                    <p>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, JPEG, PNG, GIF</p>
                </div>
            </div>
            
            <div class="form-group">
                <label for="prompt">–¢–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç:</label>
                <input type="text" id="prompt" name="prompt" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: '–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?' –∏–ª–∏ 'Describe this image'" required>
            </div>
            
            <button type="submit">üîç –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</button>
        </form>
        <button class="test-btn" id="run-tests-btn">üß™ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã</button>
        <div id="test-result"></div>
        
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="result {{ category }}">{{ message }}</div>
                {% endfor %}
            {% endif %}
        {% endwith %}
        
        {% if result %}
            <div class="result success">
                <strong>–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:</strong><br>
                {{ result }}
            </div>
        {% endif %}
    </div>
    
    <script>
        // –ü–æ–∫–∞–∑–∞—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
        document.getElementById('image').addEventListener('change', function(e) {
            const fileName = e.target.files[0]?.name;
            if (fileName) {
                const uploadArea = document.querySelector('.upload-area p');
                uploadArea.textContent = `–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: ${fileName}`;
            }
        });
        // –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
        document.getElementById('run-tests-btn').addEventListener('click', function() {
            const btn = this;
            btn.disabled = true;
            btn.textContent = '‚è≥ –¢–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è...';
            document.getElementById('test-result').innerHTML = '';
            fetch('/run_tests', {method: 'POST'})
                .then(r => r.json())
                .then(data => {
                    if (data.success) {
                        document.getElementById('test-result').innerHTML = `<div class='result success'>‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!</div>`;
                    } else {
                        document.getElementById('test-result').innerHTML = `<div class='result error'>‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏.<br>\n${data.output || ''}</div>`;
                    }
                })
                .catch(e => {
                    document.getElementById('test-result').innerHTML = `<div class='result error'>–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤</div>`;
                })
                .finally(() => {
                    btn.disabled = false;
                    btn.textContent = 'üß™ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã';
                });
        });
    </script>
</body>
</html>
"""


@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω
        if 'image' not in request.files:
            flash('–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω', 'error')
            return redirect(request.url)

        file = request.files['image']
        prompt = request.form.get('prompt', '').strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –≤—ã–±—Ä–∞–Ω
        if file.filename == '':
            flash('–§–∞–π–ª –Ω–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω', 'error')
            return redirect(request.url)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–º–ø—Ç –≤–≤–µ–¥–µ–Ω
        if not prompt:
            flash('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç', 'error')
            return redirect(request.url)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        if file and allowed_file(file.filename):
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                filename = secure_filename(file.filename)
                temp_file_path = f"temp_{filename}"
                file.save(temp_file_path)

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                result = analyze_image(temp_file_path, prompt)

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    os.remove(temp_file_path)
                except:
                    pass

                if result["success"]:
                    return render_template_string(HTML_TEMPLATE, result=result["result"])
                else:
                    flash(f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {result["error"]}', 'error')

            except Exception as e:
                flash(f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}', 'error')
        else:
            flash('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ JPG, JPEG, PNG –∏–ª–∏ GIF', 'error')

    return render_template_string(HTML_TEMPLATE)


@app.route('/run_tests', methods=['POST'])
def run_tests_api():
    """Endpoint –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ñ—Ä–æ–Ω—Ç"""
    import io
    import contextlib
    buf = io.StringIO()
    try:
        with contextlib.redirect_stdout(buf):
            result = run_tests()
        output = buf.getvalue()
        return jsonify({
            "success": result == 0,
            "output": output
        })
    except Exception as e:
        return jsonify({"success": False, "output": str(e)})


# =================== –¢–ï–°–¢–´ ===================

class TestGetClient:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ get_client"""

    @patch.dict(os.environ, {'TOKEN_HUGGI': 'test_token'})
    @patch('main.Client')
    def test_get_client_with_token_success(self, mock_client_class):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º"""
        mock_client_instance = Mock()
        mock_client_class.return_value = mock_client_instance

        result = get_client()

        mock_client_class.assert_called_once_with("amd/llama4-maverick-17b-128e-mi-amd")
        assert result == mock_client_instance

    @patch.dict(os.environ, {'TOKEN_HUGGI': 'test_token'})
    @patch('main.Client')
    def test_get_or_create_client_caching(self, mock_client_class):
        """–¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        global client
        client = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç

        mock_client_instance = Mock()
        mock_client_class.return_value = mock_client_instance

        # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤
        result1 = get_or_create_client()
        # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤
        result2 = get_or_create_client()

        mock_client_class.assert_called_once_with("amd/llama4-maverick-17b-128e-mi-amd")
        assert result1 == result2 == mock_client_instance


class TestAnalyzeImage:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ analyze_image"""

    @patch('main.get_or_create_client')
    @patch('main.handle_file')
    def test_analyze_image_success(self, mock_handle_file, mock_get_client):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        mock_client = Mock()
        mock_get_client.return_value = mock_client
        mock_handle_file.return_value = "mocked_file"
        mock_client.predict.return_value = "test_result"

        result = analyze_image("test_image.jpg", "test prompt")

        mock_handle_file.assert_called_once_with("test_image.jpg")
        mock_client.predict.assert_called_once_with(
            message={"text": "test prompt", "files": ["mocked_file"]},
            param_2="",
            param_3=2048,
            param_4=0.3,
            param_5=0,
            param_6=0,
            api_name="/chat"
        )
        assert result == {"success": True, "result": "test_result"}

    @patch('main.get_or_create_client')
    @patch('main.handle_file')
    def test_analyze_image_client_error(self, mock_handle_file, mock_get_client):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
        mock_client = Mock()
        mock_get_client.return_value = mock_client
        mock_handle_file.return_value = "mocked_file"
        mock_client.predict.side_effect = Exception("API Error")

        result = analyze_image("test_image.jpg", "test prompt")

        assert result == {"success": False, "error": "API Error"}

    @patch('main.get_or_create_client')
    @patch('main.handle_file')
    def test_analyze_image_invalid_response_format(self, mock_handle_file, mock_get_client):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞ (–Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ, —Ç.–∫. —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞)"""
        mock_client = Mock()
        mock_get_client.return_value = mock_client
        mock_handle_file.return_value = "mocked_file"
        mock_client.predict.return_value = None

        result = analyze_image("test_image.jpg", "test prompt")

        assert result["success"] is True
        assert result["result"] is None

    @patch('main.get_or_create_client')
    @patch('main.handle_file')
    def test_analyze_image_empty_prompt(self, mock_handle_file, mock_get_client):
        """–¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º –ø—Ä–æ–º–ø—Ç–æ–º"""
        mock_client = Mock()
        mock_get_client.return_value = mock_client
        mock_handle_file.return_value = "mocked_file"
        mock_client.predict.return_value = "empty_result"

        result = analyze_image("test_image.jpg", "")

        mock_client.predict.assert_called_once_with(
            message={"text": "", "files": ["mocked_file"]},
            param_2="",
            param_3=2048,
            param_4=0.3,
            param_5=0,
            param_6=0,
            api_name="/chat"
        )
        assert result == {"success": True, "result": "empty_result"}


class TestFlaskApp:
    """–¢–µ—Å—Ç—ã –¥–ª—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    @pytest.fixture
    def test_client(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç Flask"""
        app.config['TESTING'] = True
        with app.test_client() as client:
            yield client

    def test_get_homepage(self, test_client):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        response = test_client.get('/')
        assert response.status_code == 200
        assert "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - Paligemma" in response.data.decode()

    def test_post_without_file(self, test_client):
        """–¢–µ—Å—Ç POST –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ —Ñ–∞–π–ª–∞"""
        response = test_client.post('/', data={'prompt': 'test prompt'}, follow_redirects=True)
        assert "–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω" in response.data.decode()

    def test_post_without_prompt(self, test_client):
        """–¢–µ—Å—Ç POST –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ –ø—Ä–æ–º–ø—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as tmp:
            tmp.write(b"fake_image_data")
            tmp_path = tmp.name

        try:
            with open(tmp_path, 'rb') as f:
                data = {
                    'image': (f, 'test.jpg'),
                    'prompt': ''
                }
                response = test_client.post('/', data=data, follow_redirects=True)
                assert "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç" in response.data.decode()
        finally:
            try:
                os.remove(tmp_path)
            except:
                pass

    def test_post_invalid_file_type(self, test_client):
        """–¢–µ—Å—Ç POST –∑–∞–ø—Ä–æ—Å–∞ —Å –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º —Ç–∏–ø–æ–º —Ñ–∞–π–ª–∞"""
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
        with tempfile.NamedTemporaryFile(suffix='.txt', delete=False) as tmp:
            tmp.write(b"fake_text_data")
            tmp_path = tmp.name

        try:
            with open(tmp_path, 'rb') as f:
                data = {
                    'image': (f, 'test.txt'),
                    'prompt': 'test prompt'
                }
                response = test_client.post('/', data=data, follow_redirects=True)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                assert "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞" in response.data.decode()
        finally:
            try:
                os.remove(tmp_path)
            except:
                pass

    @patch('main.analyze_image')
    @patch('os.remove')
    def test_post_successful_analysis(self, mock_remove, mock_analyze, test_client):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        mock_analyze.return_value = {"success": True, "result": "test_result"}

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as tmp:
            tmp.write(b"fake_image_data")
            tmp_path = tmp.name

        try:
            with open(tmp_path, 'rb') as f:
                data = {
                    'image': (f, 'test.jpg'),
                    'prompt': 'test prompt'
                }
                response = test_client.post('/', data=data)

                assert response.status_code == 200
                assert "test_result" in response.data.decode()
                mock_analyze.assert_called_once()
        finally:
            try:
                os.remove(tmp_path)
            except:
                pass

    @patch('main.analyze_image')
    @patch('os.remove')
    def test_post_failed_analysis(self, mock_remove, mock_analyze, test_client):
        """–¢–µ—Å—Ç –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        mock_analyze.return_value = {"success": False, "error": "API Error"}

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as tmp:
            tmp.write(b"fake_image_data")
            tmp_path = tmp.name

        try:
            with open(tmp_path, 'rb') as f:
                data = {
                    'image': (f, 'test.jpg'),
                    'prompt': 'test prompt'
                }
                response = test_client.post('/', data=data, follow_redirects=True)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                assert "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: API Error" in response.data.decode()
                mock_analyze.assert_called_once()
        finally:
            try:
                os.remove(tmp_path)
            except:
                pass


class TestUtilityFunctions:
    """–¢–µ—Å—Ç—ã –¥–ª—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""

    def test_allowed_file_valid_extensions(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤"""
        assert allowed_file('test.jpg') == True
        assert allowed_file('test.jpeg') == True
        assert allowed_file('test.png') == True
        assert allowed_file('test.gif') == True
        assert allowed_file('TEST.JPG') == True  # case insensitive

    def test_allowed_file_invalid_extensions(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤"""
        assert allowed_file('test.txt') == False
        assert allowed_file('test.pdf') == False
        assert allowed_file('test.exe') == False
        assert allowed_file('test') == False  # no extension
        assert allowed_file('') == False  # empty filename


class TestIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""

    @patch.dict(os.environ, {'TOKEN_HUGGI': 'test_token'})
    @patch('main.Client')
    def test_full_workflow_mock(self, mock_client_class):
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ workflow —Å –º–æ–∫–∞–º–∏"""
        global client
        client = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç

        mock_client = Mock()
        mock_client_class.return_value = mock_client
        mock_client.predict.return_value = "mocked_result"

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as temp_file:
            temp_file.write(b"fake_image_data")
            temp_file_path = temp_file.name

        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π workflow
            client_instance = get_or_create_client()
            result = analyze_image(temp_file_path, "test prompt")

            assert result == {"success": True, "result": "mocked_result"}
            mock_client.predict.assert_called_once()
        finally:
            # –û—á–∏—Å—Ç–∫–∞
            os.unlink(temp_file_path)

    @pytest.fixture
    def test_client(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç Flask –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        app.config['TESTING'] = True
        with app.test_client() as client:
            yield client

    @patch('main.analyze_image')
    def test_full_flask_workflow(self, mock_analyze, test_client):
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ Flask workflow"""
        mock_analyze.return_value = {"success": True, "result": "integration_test_result"}

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as tmp:
            tmp.write(b"fake_image_data")
            tmp_path = tmp.name

        try:
            with open(tmp_path, 'rb') as f:
                data = {
                    'image': (f, 'integration_test.jpg'),
                    'prompt': 'integration test prompt'
                }
                response = test_client.post('/', data=data)

                assert response.status_code == 200
                assert "integration_test_result" in response.data.decode()
                mock_analyze.assert_called_once()
        finally:
            try:
                os.remove(tmp_path)
            except:
                pass


def run_flask_app():
    """–ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("üåê –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    print("–û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:5000")
    print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    try:
        get_client()
        print("‚úÖ –¢–æ–∫–µ–Ω Hugging Face –Ω–∞–π–¥–µ–Ω")
    except ValueError as e:
        print(f"‚ùå {e}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN_HUGGI")
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app.run(host='0.0.0.0', port=5000, debug=False)


def run_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...")
    print("=" * 50)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ pytest
    pytest_args = [
        __file__,  # –¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª
        "-v",  # –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
        "-s",  # –ü–æ–∫–∞–∑–∞—Ç—å print
        "--tb=short",  # –ö–æ—Ä–æ—Ç–∫–∏–π traceback
        "--no-header",  # –ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        "-q",  # –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º –¥–ª—è –º–µ–Ω–µ–µ –∑–∞–≥—Ä–æ–º–æ–∂–¥–µ–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
    ]

    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    result = pytest.main(pytest_args)

    if result == 0:
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏ (–∫–æ–¥ –≤—ã—Ö–æ–¥–∞: {result})")

    return result


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å—Ä–∞–∑—É, –±–µ–∑ –º–µ–Ω—é
    run_flask_app()
